AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance with ALB and HTTPS support

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH key pair for EC2 access
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues: [t2.micro, t3.micro, t3.small]
  SSHLocation:
    Type: String
    Default: 0.0.0.0/0
    Description: Allowed SSH IP range
  SSLCertificateArn:
    Type: String
    Description: ACM certificate ARN for HTTPS
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-042ab77de9894db8b
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Default: "subnet-0c91497ce82e17f73, subnet-0e327dfc9eb13e01a"

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and ALB traffic
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Select [0, !Ref SubnetIds]
      UserData:
        Fn::Base64: |
          #!/bin/bash
          set -euxo pipefail
          yum update -y
          amazon-linux-extras install docker -y
          systemctl enable --now docker
          usermod -aG docker ec2-user
          # Refresh group membership without reboot
          exec sudo -u ec2-user -i <<'EOF'
            docker --version
          EOF

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups: [!Ref LoadBalancerSecurityGroup]
      Subnets: !Ref SubnetIds
      Type: application

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 180
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Targets:
        - Id: !Ref EC2Instance
          Port: 8080

Mappings:
  RegionMap:
    eu-west-1:
      AMI: ami-0ebba8fc8759958a0

Outputs:
  LoadBalancerDNS:
    Description: Application URL
    Value: !GetAtt LoadBalancer.DNSName
  InstanceIP:
    Description: EC2 Public IP
    Value: !GetAtt EC2Instance.PublicIp
